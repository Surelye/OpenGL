#version 330 core													
in vec3 ourColor;
in vec2 TexCoord;

out vec4 color;

uniform sampler2D ourTexture1;
uniform sampler2D ourTexture2;

// Фрагментный шейдер должен иметь доступ к текстурному объекту, но как передать 
// его во фрагментный шейдер? GLSL имеет встроенный тип данных для текстурных
// объектов, называемый sampler, у которого в качестве окончания идёт тип текстуры,
// то есть sampler2D. Мы можем передать текстуру фрагментному шейдеру объявив в нём
// uniform sampler2D. 
// Для сэмплирования цвета текстуры используем встроенную в GLSL функцию texture, которая в качестве
// первого аргумента принимает текстурный sampler, а в качестве второго текстурные координаты.
// Функция texture затем сэмплирует значение цвета, используя текстурные параметры, которые мы 
// задали ранее. Результатом работы этого фрагментного шейдера будет (фильтрованный) цвет текстуры
// на (интерполированной) текстурной координате.

void main()														
{
	// Для получения более цветастого эффекта можем смешать результирующий цвет текстуры
	// с вершинным цветом. Для смешивания умножим цвета:
	color = mix(texture(ourTexture1, TexCoord), texture(ourTexture2, TexCoord), 0.2); // * vec4(ourColor, 1.0f);
	// Финальный результат - это комбинация двух текстур. В GLSL встроена функция mix, которая
	// принимает два значения на вход и интерполирует их на основе третьего значения. Если третье
	// значение 0.0, то эта функция вернёт первый аргумент, если 1.0, то второй. Значение в 0.2 
	// вернёт 80% первого входного цвета и 20% второго входного цвета. Теперь надо загрузить и создать
	// другую текстуру.
}																	